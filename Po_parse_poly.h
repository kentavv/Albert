/*******************************************************************/
/***  FILE :     Po_parse_poly.h                                 ***/
/***  AUTHOR:    Sekhar Muddana                                  ***/
/*******************************************************************/

#define     DEBUG_PARSE  0
#define     TRUE    	 1
#define     FALSE        0
#define     MAX_INT      67108864     /* 2^26 */
#define     NSYMBOLS     41
#define     NUM_PRODS    36
#define     STRING_LEN   100
#define	    MAXLINE      100
#define	    HANDLE_LEN   50
#define	    NO_RELATION	 0
#define	    EQ_RELATION	 1
#define	    GT_RELATION	 2
#define	    LT_RELATION	 3
#define     SCALAR_U_BOUND  65535    /* 2^16 - 1 */
#define     SCALAR_L_BOUND  -65535    /* 2^16 */

/* The following are codes for tokens */
#define	    INVALID_TOKEN  -1
#define	    CENT            0
#define	    MINUS           19
#define	    PLUS            20
#define	    INT	            21
#define	    EXP_SYM         22
#define	    STAR            23
#define	    LETTER          24
#define	    LEFT_PARAN      25
#define	    RIGHT_PARAN	    26
#define	    LEFT_BRACKET    27
#define	    COMMA           28
#define	    RIGHT_BRACKET   29
#define	    JORDAN          30
#define	    TOKEN_LESS      31
#define	    TOKEN_GREATER   32
#define	    LEFT_BRACE      33
#define	    RIGHT_BRACE	    34
#define	    LEFT_QUOTE      35
#define	    RIGHT_QUOTE     36
#define	    COLON           37
#define	    A_WORD          38
#define	    SEMI_COLON      39 
#define	    DOLLAR          40

/*
 * The polynomial string gets converted into a tree (max arity is 3).
 * The nodes of the tree are unexpanded tree nodes (unexp_tnode).
 * If the node represents an atom (either a small letter or integer),
 * then operand1,2,3 are NULL's. Otherwise the node will have an operator
 * and 1 or more operands. (i.e pointers to other nodes i.e subtrees)
 *
 */
typedef struct unexp_tnode {
    int	   operator;
    char   s_letter;
    int	   scalar_num;
    struct unexp_tnode *operand1; 	
    struct unexp_tnode *operand2; 	
    struct unexp_tnode *operand3; 	
    struct unexp_tnode *next; 	
} UNEXP_TNODES;

/* 
 * Takes a string as input and does a simple precedence parsing to
 * check if it is syntactically correct. (yielding a legal polynomial).
 * Also does the semantics, generating an unexpanded tree.(a bottom expansion
 * resolving operations like commutation and association has to be done.
 * The pointer to the generated tree is returned.
 *
 */
struct unexp_tnode *parse_poly();
void init_tables();
void print_tree();

static struct prod_node {
    char *rhs;
    int  lhs;
} Prod_nodes[] = { 
      "2",1,"192",1,"202",1,"1202",1,"1192",1,"3",2,"213",2,"4",3,"42221",3,
      "4234",3,"6",4,"5",4,"76",5,"7",6,"24",7,"8",7,"9",7,"10",7,"11",7,
      "13",7,"17",7,"251226",7,"2712281229",8,"25122812281226",9,
      "3025122812281226",10,"31122812281232",11,"1",12,"3371434",13,"15",14,
      "16",15,"1516",15,"735",16,"736",16,"1834",17,"18377",18,"383321397",18
  };

static int Sp_relation[41][41] = {
{0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,1,1,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,2,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,2,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,1,3,3,3,3,3,0,3,1,3,3,3,3,2,2,0,2,2,3,3,2,3,2,2,3,3,2,3,2,1,1,2,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2},
{2,0,0,0,0,0,0,3,3,3,3,3,0,3,0,0,1,3,3,0,0,0,0,0,3,3,0,3,0,0,3,3,0,3,2,0,0,0,3,0,2},
{2,0,0,0,0,0,0,2,2,2,2,2,0,2,0,0,2,2,2,0,0,0,0,0,2,2,0,2,0,0,2,2,0,2,2,0,0,0,2,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,2},
{2,0,1,3,3,3,3,3,3,3,3,3,0,3,0,0,0,3,3,0,0,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,1,3,3,3,3,3,3,3,3,3,0,3,0,0,0,3,3,0,0,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,1,3,3,3,3,3,3,3,3,0,3,0,0,0,3,3,2,2,0,0,0,3,3,2,3,2,2,3,3,2,3,0,0,0,0,3,1,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
{2,0,0,0,1,3,3,3,3,3,3,3,0,3,0,0,0,3,3,0,0,0,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,3,3,3,3,3,3,3,3,3,3,3,1,3,0,0,0,3,3,3,3,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,3,3,3,3,3,3,3,3,3,3,3,1,3,0,0,0,3,3,3,3,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,3,3,3,3,3,3,3,3,3,3,3,1,3,0,0,0,3,3,3,3,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
{2,3,3,3,3,3,3,3,3,3,3,3,1,3,0,0,0,3,3,3,3,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,1,3,3,3,3,0,3,0,0,0,3,3,0,0,1,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,2,2,2,2,2,0,2,0,0,2,2,2,0,0,0,0,0,2,2,0,2,0,0,2,2,0,2,2,0,0,0,2,0,2},
{2,0,0,0,0,0,0,2,2,2,2,2,0,2,0,0,2,2,2,0,0,0,0,0,2,2,0,2,0,0,2,2,0,2,2,0,0,0,2,0,2},
{2,0,0,0,0,0,0,1,3,3,3,3,0,3,0,0,0,3,3,0,0,0,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,1,3,3,3,3,0,3,0,0,0,3,3,0,0,0,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0}
};                              /* Simple precedence matrix */
