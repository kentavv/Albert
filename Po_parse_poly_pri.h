#ifndef _PO_PARSE_POLY_PRI_H_
#define _PO_PARSE_POLY_PRI_H_

/*******************************************************************/
/***  FILE :     Po_parse_poly.h                                 ***/
/***  AUTHOR:    Sekhar Muddana                                  ***/
/*******************************************************************/

/* 
 * Takes a string as input and does a simple precedence parsing to
 * check if it is syntactically correct. (yielding a legal polynomial).
 * Also does the semantics, generating an unexpanded tree.(a bottom expansion
 * resolving operations like commutation and association has to be done.
 * The pointer to the generated tree is returned.
 *
 */

static struct prod_node {
    char *rhs;
    int  lhs;
} Prod_nodes[] = { 
      "2",1,"192",1,"202",1,"1202",1,"1192",1,"3",2,"213",2,"4",3,"42221",3,
      "4234",3,"6",4,"5",4,"76",5,"7",6,"24",7,"8",7,"9",7,"10",7,"11",7,
      "13",7,"17",7,"251226",7,"2712281229",8,"25122812281226",9,
      "3025122812281226",10,"31122812281232",11,"1",12,"3371434",13,"15",14,
      "16",15,"1516",15,"735",16,"736",16,"1834",17,"18377",18,"383321397",18
  };

static int Sp_relation[41][41] = {
{0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,1,1,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,2,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,2,0,0,2,0,2,2,0,0,2,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,1,3,3,3,3,3,0,3,1,3,3,3,3,2,2,0,2,2,3,3,2,3,2,2,3,3,2,3,2,1,1,2,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2},
{2,0,0,0,0,0,0,3,3,3,3,3,0,3,0,0,1,3,3,0,0,0,0,0,3,3,0,3,0,0,3,3,0,3,2,0,0,0,3,0,2},
{2,0,0,0,0,0,0,2,2,2,2,2,0,2,0,0,2,2,2,0,0,0,0,0,2,2,0,2,0,0,2,2,0,2,2,0,0,0,2,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,2},
{2,0,1,3,3,3,3,3,3,3,3,3,0,3,0,0,0,3,3,0,0,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,1,3,3,3,3,3,3,3,3,3,0,3,0,0,0,3,3,0,0,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,1,3,3,3,3,3,3,3,3,0,3,0,0,0,3,3,2,2,0,0,0,3,3,2,3,2,2,3,3,2,3,0,0,0,0,3,1,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
{2,0,0,0,1,3,3,3,3,3,3,3,0,3,0,0,0,3,3,0,0,0,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,3,3,3,3,3,3,3,3,3,3,3,1,3,0,0,0,3,3,3,3,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,3,3,3,3,3,3,3,3,3,3,3,1,3,0,0,0,3,3,3,3,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,3,3,3,3,3,3,3,3,3,3,3,1,3,0,0,0,3,3,3,3,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
{2,3,3,3,3,3,3,3,3,3,3,3,1,3,0,0,0,3,3,3,3,3,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,1,3,3,3,3,0,3,0,0,0,3,3,0,0,1,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2},
{2,0,0,0,0,0,0,2,2,2,2,2,0,2,0,0,2,2,2,0,0,0,0,0,2,2,0,2,0,0,2,2,0,2,2,0,0,0,2,0,2},
{2,0,0,0,0,0,0,2,2,2,2,2,0,2,0,0,2,2,2,0,0,0,0,0,2,2,0,2,0,0,2,2,0,2,2,0,0,0,2,0,2},
{2,0,0,0,0,0,0,1,3,3,3,3,0,3,0,0,0,3,3,0,0,0,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2},
{2,0,0,0,0,0,0,1,3,3,3,3,0,3,0,0,0,3,3,0,0,0,0,0,3,3,0,3,0,0,3,3,0,3,0,0,0,0,3,0,2},
{0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0}
};                              /* Simple precedence matrix */

#endif
